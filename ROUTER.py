from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from openai import OpenAI
from dotenv import load_dotenv
from datetime import datetime
from sqlalchemy import create_engine, Column, Integer, String, Text, ForeignKey, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship
import os
import html
import platform
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_KEY = os.getenv("OPENROUTER_API_KEY")

if not TOKEN or not OPENROUTER_KEY:
    raise ValueError("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ TOKEN –∏ OPENROUTER_API_KEY –≤ .env!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenRouter
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_KEY,
    default_headers={
        "HTTP-Referer": "https://github.com/local",
        "X-Title": "Telegram AI Assistant"
    }
)

# SQLAlchemy –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
Base = declarative_base()
engine = create_engine('sqlite:///bot.db', echo=True)
Session = sessionmaker(bind=engine)


# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class User(Base):
    __tablename__ = 'users'

    user_id = Column(Integer, primary_key=True)
    username = Column(String(50))
    first_name = Column(String(50))
    last_name = Column(String(50))
    registered_at = Column(DateTime)

    messages = relationship("Message", back_populates="user")


class Message(Base):
    __tablename__ = 'messages'

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.user_id'))
    message_text = Column(Text)
    response_text = Column(Text)
    created_at = Column(DateTime)

    user = relationship("User", back_populates="messages")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    Base.metadata.create_all(engine)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user: types.User):
    session = Session()
    try:
        existing_user = session.query(User).filter_by(user_id=user.id).first()
        if not existing_user:
            new_user = User(
                user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                registered_at=datetime.now()
            )
            session.add(new_user)
            session.commit()
    finally:
        session.close()


def save_message(user_id: int, message_text: str, response_text: str):
    session = Session()
    try:
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        clean_msg = message_text.encode('utf-8', 'ignore').decode('utf-8').strip()
        clean_ans = response_text.encode('utf-8', 'ignore').decode('utf-8').strip()

        message = Message(
            user_id=user_id,
            message_text=clean_msg,
            response_text=clean_ans,
            created_at=datetime.now()
        )
        session.add(message)
        session.commit()
    finally:
        session.close()


def get_history(user_id: int, limit=5):
    session = Session()
    try:
        messages = session.query(Message).filter_by(user_id=user_id) \
            .order_by(Message.created_at.desc()) \
            .limit(limit).all()

        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –±–∏–Ω–∞—Ä–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        cleaned_history = []
        for msg in messages:
            clean_msg = (msg.message_text or "").encode('utf-8', 'ignore').decode('utf-8').strip()
            clean_ans = (msg.response_text or "").encode('utf-8', 'ignore').decode('utf-8').strip()
            cleaned_history.append((clean_msg, clean_ans))

        return cleaned_history
    finally:
        session.close()


# –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É
@dp.message_handler(commands=['clean_db'])
async def clean_database(message: types.Message):
    session = Session()
    try:
        for msg in session.query(Message).all():
            msg.message_text = (msg.message_text or "").encode('utf-8', 'ignore').decode('utf-8').strip()
            msg.response_text = (msg.response_text or "").encode('utf-8', 'ignore').decode('utf-8').strip()
        session.commit()
        await message.reply("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ –æ—Ç –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    finally:
        session.close()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    register_user(message.from_user)

    start_text = """
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-–±–æ—Ç–∞ —Å OpenRouter!</b>

<u>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</u>
‚Ä¢ –û–±—â–µ–Ω–∏–µ —Å –ò–ò (Llama3/Mistral/Gemini)
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

<u>üìå –ö–æ–º–∞–Ω–¥—ã:</u>
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞
/history - –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
/model - –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å –ò–ò
/features - –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞

<u>üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:</u>
‚Ä¢ llama3 - Meta Llama 3 70B
‚Ä¢ mistral - Mistral 7B
‚Ä¢ gemini - Google Gemini Pro

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –ò–ò!

<code>–°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–∞: llama3-70b</code>
"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton('/help'))
    keyboard.add(KeyboardButton('/history'))
    keyboard.add(KeyboardButton('/model'))
    start_text += f"\n\n<code>–í–µ—Ä—Å–∏—è Python: {platform.python_version()}</code>"
    await message.reply(start_text, parse_mode="HTML")


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    help_text = """
üÜò *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/history - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
/features - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é –ò–ò!
"""
    await message.reply(help_text, parse_mode="Markdown")


@dp.message_handler(commands=['features'])
async def features_command(message: types.Message):
    features_text = """
üåü *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:*
‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é Llama 3 70B
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Markdown-—Ä–∞–∑–º–µ—Ç–∫–∏
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
"""
    await message.reply(features_text, parse_mode="Markdown")


@dp.message_handler(commands=['history'])
async def show_history(message: types.Message):
    history = get_history(message.from_user.id)
    if not history:
        await message.reply("–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞")
        return

    response = "üìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n"
    for i, (msg, ans) in enumerate(history, 1):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º–∞
        msg_text = html.escape(msg) if msg else "[—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ]"
        ans_text = html.escape(ans) if ans else "[–æ—Ç–≤–µ—Ç —É–¥–∞–ª–µ–Ω]"

        response += (
            f"{i}. <b>–í—ã:</b> {msg_text[:100]}{'...' if len(msg_text) > 100 else ''}\n"
            f"   <b>–ë–æ—Ç:</b> {ans_text[:100]}{'...' if len(ans_text) > 100 else ''}\n\n"
        )

    await message.reply(response, parse_mode="HTML")


@dp.message_handler(commands=['clear'])
async def clear_history(message: types.Message):
    session = Session()
    try:
        deleted_count = session.query(Message) \
            .filter_by(user_id=message.from_user.id) \
            .delete()
        session.commit()
        await message.reply(f"üóë –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {deleted_count}")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}")
    finally:
        session.close()


@dp.message_handler(commands=['model'])
async def change_model(message: types.Message):
    models = {
        'llama3': 'meta-llama/llama-3-70b-instruct',
        'mistral': 'mistralai/mistral-7b-instruct',
        'gemini': 'google/gemini-pro'
    }

    args = message.get_args()
    if args in models:
        await message.reply(f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {args}")
    else:
        await message.reply("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: /model llama3|mistral|gemini")


@dp.message_handler()
async def handle_message(message: types.Message):
    try:
        history = get_history(message.from_user.id)

        messages = [{"role": "system", "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."}]
        for msg, ans in reversed(history):
            messages.extend([
                {"role": "user", "content": msg},
                {"role": "assistant", "content": ans}
            ])
        messages.append({"role": "user", "content": message.text})

        response = client.chat.completions.create(
            model="meta-llama/llama-3-70b-instruct",
            messages=messages,
            max_tokens=1500
        )

        answer = response.choices[0].message.content
        save_message(message.from_user.id, message.text, answer)
        await message.reply(answer)

    except Exception as e:
        await message.reply(f" –û—à–∏–±–∫–∞: {str(e)}")


if __name__ == '__main__':
    init_db()
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)
